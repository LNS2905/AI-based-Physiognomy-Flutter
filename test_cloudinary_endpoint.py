# -*- coding: utf-8 -*-
"""test_cloudinary_endpoint.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1plHeEZChmtpeC4f-p4l0FganA2obDzKt

# Test Physiognomy Face Analysis API - Cloudinary Endpoint

This notebook demonstrates how to test the `/analyze-face-from-cloudinary/` endpoint of the Physiognomy Face Analysis API.

## Overview
The API endpoint analyzes facial features from images stored in Cloudinary using signed URLs and returns detailed physiognomy analysis results.

## Requirements
- Running Physiognomy Face Analysis API server
- Cloudinary account with valid credentials
- Sample face images uploaded to Cloudinary

## 1. Install Required Dependencies

First, let's install all required packages for this notebook.
"""

# Install all required packages
!pip install requests cloudinary pillow matplotlib python-dotenv

print("✅ All required packages installed successfully!")

"""## 2. Import Required Libraries"""

import requests
import json
import os
import time
from datetime import datetime, timedelta
import cloudinary
import cloudinary.uploader
import cloudinary.utils
from PIL import Image
import io
import base64

print("✅ Required libraries imported successfully")

# Direct configuration - no environment files needed
print("\n📋 Configuration Settings:")
print("✅ Using hardcoded Cloudinary credentials")
print("✅ Using ngrok public domain")
print("✅ Notebook is completely standalone")

"""## 3. Configuration Setup

This notebook is completely standalone with hardcoded credentials and ngrok domain.
No environment files or external configuration needed.
"""

# API Configuration - Direct hardcoded values
API_BASE_URL = "https://inspired-bear-emerging.ngrok-free.app"
CLOUDINARY_ENDPOINT = f"{API_BASE_URL}/analyze-face-from-cloudinary/"

# Cloudinary credentials - hardcoded directly
CLOUDINARY_CLOUD_NAME = "dd0wymyqj"
CLOUDINARY_API_KEY = "389718786139835"
CLOUDINARY_API_SECRET = "aS_7wWncQjOLpKRKnHEd0_dr07M"

# Ngrok configuration - hardcoded directly
NGROK_AUTHTOKEN = "2riu90TON9I06OUmKz0csXVT8K1_zhKft54P86coUbsd3CnS"
NGROK_DOMAIN = "inspired-bear-emerging.ngrok-free.app"

# Configure Cloudinary with direct values
cloudinary.config(
    cloud_name=CLOUDINARY_CLOUD_NAME,
    api_key=CLOUDINARY_API_KEY,
    api_secret=CLOUDINARY_API_SECRET,
    secure=True
)

print(f"✅ Cloudinary configured for: {CLOUDINARY_CLOUD_NAME}")
print(f"✅ API Endpoint: {CLOUDINARY_ENDPOINT}")
print(f"✅ Ngrok Domain: {NGROK_DOMAIN}")
print(f"✅ All credentials set directly in variables")

"""## 4. Upload Test Image to Cloudinary

First, let's upload a sample face image to Cloudinary and get a signed URL for testing.
"""

# Function to upload image to Cloudinary and get signed URL
def upload_test_image_to_cloudinary(image_path_or_url, folder_path="test_physiognomy"):
    """
    Upload an image to Cloudinary and return signed URL
    """
    try:
        # Upload image to Cloudinary
        upload_result = cloudinary.uploader.upload(
            image_path_or_url,
            resource_type="image",
            type="private",  # Private type for signed URLs
            folder=folder_path,
            public_id=f"test_image_{int(datetime.now().timestamp())}",
            format="jpg"
        )

        # Generate signed URL (valid for 24 hours)
        from datetime import timedelta
        signed_url = cloudinary.utils.private_download_url(
            upload_result['public_id'],
            upload_result['format'],
            expires_at=int((datetime.now() + timedelta(hours=24)).timestamp())
        )

        return signed_url, upload_result['public_id'], folder_path

    except Exception as e:
        print(f"❌ Error uploading image: {str(e)}")
        return None, None, None

# Test with a sample image URL (you can replace this with your own image)
# Example: Use a public face image for testing
test_image_url = "/content/small.jpg"

print("📤 Uploading test image to Cloudinary...")
signed_url, public_id, folder_path = upload_test_image_to_cloudinary(test_image_url)

if signed_url:
    print(f"✅ Image uploaded successfully!")
    print(f"📷 Public ID: {public_id}")
    print(f"📁 Folder: {folder_path}")
    print(f"🔗 Signed URL: {signed_url[:50]}...")
else:
    print("❌ Failed to upload image")

"""## 5. Define API Endpoint and Test Data

Prepare the request payload for the `/analyze-face-from-cloudinary/` endpoint.
"""

# Prepare request payload according to CloudinaryAnalysisRequest model
test_payload = {
    "signed_url": signed_url,
    "user_id": "test_user_001",
    "timestamp": datetime.now().isoformat(),
    "original_folder_path": folder_path
}

print("📋 Request Payload:")
print(json.dumps(test_payload, indent=2))

# Request headers
headers = {
    "Content-Type": "application/json",
    "Accept": "application/json"
}

print(f"\n🎯 Target Endpoint: {CLOUDINARY_ENDPOINT}")
print("📝 Headers:", headers)

"""## 6. Send Test Request to /analyze-face-from-cloudinary/

Send POST request to the API endpoint and measure response time.
"""

# Send POST request to the API
print("🚀 Sending request to Physiognomy API...")
start_time = time.time()

try:
    response = requests.post(
        CLOUDINARY_ENDPOINT,
        json=test_payload,
        headers=headers,
        timeout=120  # 2 minutes timeout for processing
    )

    end_time = time.time()
    processing_time = end_time - start_time

    print(f"⏱️ Request completed in {processing_time:.2f} seconds")
    print(f"📊 Status Code: {response.status_code}")

    # Check if request was successful
    if response.status_code == 200:
        print("✅ Request successful!")
        api_response = response.json()
    else:
        print(f"❌ Request failed with status {response.status_code}")
        print(f"Error details: {response.text}")
        api_response = None

except requests.exceptions.Timeout:
    print("❌ Request timed out (>120 seconds)")
    api_response = None
except requests.exceptions.ConnectionError:
    print("❌ Connection error - make sure the API server is running")
    api_response = None
except Exception as e:
    print(f"❌ Unexpected error: {str(e)}")
    api_response = None

"""## 7. Display and Interpret API Response

Parse and display the analysis results in a readable format.
"""

if api_response:
    print("📊 API Response Analysis")
    print("=" * 50)

    # Display basic response info
    print(f"Status: {api_response.get('status', 'N/A')}")
    print(f"Message: {api_response.get('message', 'N/A')}")
    print(f"User ID: {api_response.get('user_id', 'N/A')}")
    print(f"Processed at: {api_response.get('processed_at', 'N/A')}")

    # Display harmony score
    harmony_score = api_response.get('total_harmony_score', 0)
    print(f"\n🎯 Total Harmony Score: {harmony_score}/100")

    # Display result URLs
    print(f"\n🖼️ Result Images:")
    annotated_url = api_response.get('annotated_image_url', '')
    report_url = api_response.get('report_image_url', '')

    if annotated_url:
        print(f"📷 Annotated Image: {annotated_url[:60]}...")
    if report_url:
        print(f"📋 Report Image: {report_url[:60]}...")

    # Display facial analysis details
    analysis = api_response.get('analysis', {})
    if analysis:
        print(f"\n🧠 Facial Analysis Details:")
        print(f"Face Shape: {analysis.get('face_shape', 'N/A')}")

        # Feature scores
        features = analysis.get('features', {})
        if features:
            print(f"\n📏 Feature Scores:")
            for feature, data in features.items():
                if isinstance(data, dict) and 'score' in data:
                    score = data['score']
                    print(f"  • {feature}: {score}/100")

        # Physiognomy result
        result = analysis.get('result', '')
        if result:
            print(f"\n🔮 Physiognomy Analysis:")
            print(result[:200] + "..." if len(result) > 200 else result)

    print(f"\n📄 Full Response (JSON):")
    print(json.dumps(api_response, indent=2, ensure_ascii=False))

else:
    print("❌ No response data available to display")

"""## 8. Download and Display Result Images

Download the processed images from Cloudinary and display them in the notebook.
"""

import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

def download_and_display_image(url, title):
    """Download image from URL and display it"""
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()

        # Open image with PIL
        image = Image.open(io.BytesIO(response.content))

        # Display with matplotlib
        plt.figure(figsize=(10, 8))
        plt.imshow(image)
        plt.title(title, fontsize=14, fontweight='bold')
        plt.axis('off')
        plt.tight_layout()
        plt.show()

        return image

    except Exception as e:
        print(f"❌ Error downloading/displaying image: {str(e)}")
        return None

if api_response and api_response.get('status') == 'success':
    print("🖼️ Displaying Result Images...")

    # Display annotated image
    annotated_url = api_response.get('annotated_image_url')
    if annotated_url:
        print("📷 Annotated Image (with facial feature detection):")
        download_and_display_image(annotated_url, "Annotated Face Analysis")

    # Display report image
    report_url = api_response.get('report_image_url')
    if report_url:
        print("📋 Analysis Report Image:")
        download_and_display_image(report_url, "Physiognomy Analysis Report")

    print("✅ Images displayed successfully!")

else:
    print("❌ No successful API response to display images from")

"""## 9. Usage Notes and Troubleshooting

### This Notebook is Standalone:
- ✅ No `.env` file required
- ✅ All credentials hardcoded in the notebook
- ✅ Uses ngrok public domain for API access
- ✅ Can be run independently of the main project
- ✅ Automatically installs all required dependencies

### Before Running This Notebook:
1. **Run Cell 1**: Install all required packages automatically
2. **API Server**: Make sure the Physiognomy API server is running and accessible via ngrok
3. **Internet Connection**: Required for package installation, Cloudinary uploads and API requests

### Troubleshooting:
- **Package Installation Failed**: Make sure you have pip installed and internet connection
- **Connection Error**: Check if the ngrok domain is active and accessible
- **Cloudinary Upload Failed**: Check internet connection (credentials are hardcoded)
- **Analysis Failed**: Ensure the uploaded image contains a clear face
- **Timeout**: Face analysis can take 30-60 seconds for complex images

### API Endpoint Details:
- **Method**: POST
- **URL**: `https://inspired-bear-emerging.ngrok-free.app/analyze-face-from-cloudinary/`
- **Content-Type**: `application/json`
- **Timeout**: Up to 2 minutes for processing

### Expected Response Structure:
```json
{
  "status": "success",
  "analysis": {...},
  "total_harmony_score": 85.6,
  "annotated_image_url": "https://...",
  "report_image_url": "https://...",
  "message": "Analysis completed successfully",
  "user_id": "test_user_001",
  "processed_at": "2025-07-10T..."
}
```

### Dependencies Auto-Installed:
```bash
requests cloudinary pillow matplotlib python-dotenv
```
"""